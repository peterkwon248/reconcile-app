import streamlit as st 
import pandas as pd
import io
from openpyxl.styles import PatternFill, Font
from openpyxl import load_workbook

st.set_page_config(page_title="üìä Í≥ÑÏÇ∞ÏÑú ÏûêÎèô Ï†ïÎ¶¨ ÌîÑÎ°úÍ∑∏Îû®", layout="centered")
st.title("üìä Í≥ÑÏÇ∞ÏÑú ÏûêÎèô Ï†ïÎ¶¨ ÌîÑÎ°úÍ∑∏Îû®")

st.markdown("### üìÑ ÏÇ¨Ïù¥Ìä∏ Ï£ºÎ¨∏ÎÇ¥Ïó≠ ÏóëÏÖÄ ÏóÖÎ°úÎìú")
order_file = st.file_uploader("", type=["xls", "xlsx"], key="order", label_visibility="collapsed")

st.markdown("### üí∞ Í≥ÑÏ¢å ÏûÖÍ∏àÎÇ¥Ïó≠ ÏóëÏÖÄ ÏóÖÎ°úÎìú")
deposit_file = st.file_uploader("", type=["xls", "xlsx"], key="deposit", label_visibility="collapsed")

if order_file and deposit_file:
    try:
        # ‚úÖ Ï£ºÎ¨∏ÎÇ¥Ïó≠ Ï≤òÎ¶¨
        order_df = pd.read_excel(order_file, engine="openpyxl")
        order_columns = order_df.columns

        # ÏûêÎèô Ïª¨Îüº Ïù¥Î¶Ñ Îß§Ìïë
        order_df = order_df.rename(columns={
            [col for col in order_columns if 'ÏûÖÍ∏àÏûê' in col][0]: "ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)",
            [col for col in order_columns if 'Ï£ºÎ¨∏Ïûê' in col or 'ÌöåÏõêÎ™Ö' in col][0]: "Ï£ºÎ¨∏Ïûê",
            [col for col in order_columns if 'Í≤∞Ï†ú' in col or 'Íµ¨Îß§Í∏àÏï°' in col][0]: "Ï¥ù Íµ¨Îß§Í∏àÏï°"
        })

        order_df["Ï¥ù Íµ¨Îß§Í∏àÏï°"] = pd.to_numeric(order_df["Ï¥ù Íµ¨Îß§Í∏àÏï°"], errors="coerce").fillna(0)
        order_df["ÏûÖÍ∏àÏûêÌÇ§"] = order_df["ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)"].astype(str).str.replace(" ", "").str.strip()

        order_grouped = order_df.groupby("ÏûÖÍ∏àÏûêÌÇ§", as_index=False).agg({
            "Ï£ºÎ¨∏Ïûê": "first",
            "ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)": "first",
            "Ï¥ù Íµ¨Îß§Í∏àÏï°": "sum"
        })

        # ‚úÖ ÏûÖÍ∏àÎÇ¥Ïó≠ Ï≤òÎ¶¨
        deposit_df = pd.read_excel(deposit_file, engine="openpyxl")
        deposit_columns = deposit_df.columns

        deposit_df = deposit_df.rename(columns={
            [col for col in deposit_columns if 'ÎÇ¥Ïö©' in col or 'ÏûÖÍ∏àÏûê' in col][0]: "ÏûÖÍ∏àÏûê(Ïã§Ï†ú)",
            [col for col in deposit_columns if 'Í∏àÏï°' in col][0]: "ÌÜµÏû•ÏûÖÍ∏à"
        })

        deposit_df["ÌÜµÏû•ÏûÖÍ∏à"] = pd.to_numeric(deposit_df["ÌÜµÏû•ÏûÖÍ∏à"], errors="coerce").fillna(0)
        deposit_df["ÏûÖÍ∏àÏûêÌÇ§"] = deposit_df["ÏûÖÍ∏àÏûê(Ïã§Ï†ú)"].astype(str).str.replace(" ", "").str.strip()

        deposit_grouped = deposit_df.groupby("ÏûÖÍ∏àÏûêÌÇ§", as_index=False).agg({
            "ÏûÖÍ∏àÏûê(Ïã§Ï†ú)": "first",
            "ÌÜµÏû•ÏûÖÍ∏à": "sum"
        })

        # ‚úÖ Î≥ëÌï© Ï≤òÎ¶¨
        matched_rows = []
        used_deposit_keys = set()

        for _, order_row in order_grouped.iterrows():
            site_key = order_row["ÏûÖÍ∏àÏûêÌÇ§"]
            matched = False
            for _, deposit_row in deposit_grouped.iterrows():
                deposit_key = deposit_row["ÏûÖÍ∏àÏûêÌÇ§"]
                if (site_key in deposit_key or deposit_key in site_key) and deposit_key not in used_deposit_keys:
                    matched_rows.append({
                        "Ï£ºÎ¨∏Ïûê": order_row["Ï£ºÎ¨∏Ïûê"],
                        "ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)": order_row["ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)"],
                        "ÏûÖÍ∏àÏûê(Ïã§Ï†ú)": deposit_row["ÏûÖÍ∏àÏûê(Ïã§Ï†ú)"],
                        "Ï¥ù Íµ¨Îß§Í∏àÏï°": order_row["Ï¥ù Íµ¨Îß§Í∏àÏï°"],
                        "ÌÜµÏû•ÏûÖÍ∏à": deposit_row["ÌÜµÏû•ÏûÖÍ∏à"]
                    })
                    used_deposit_keys.add(deposit_key)
                    matched = True
                    break
            if not matched:
                matched_rows.append({
                    "Ï£ºÎ¨∏Ïûê": order_row["Ï£ºÎ¨∏Ïûê"],
                    "ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)": order_row["ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)"],
                    "ÏûÖÍ∏àÏûê(Ïã§Ï†ú)": "",
                    "Ï¥ù Íµ¨Îß§Í∏àÏï°": order_row["Ï¥ù Íµ¨Îß§Í∏àÏï°"],
                    "ÌÜµÏû•ÏûÖÍ∏à": 0
                })

        unmatched = deposit_grouped[~deposit_grouped["ÏûÖÍ∏àÏûêÌÇ§"].isin(used_deposit_keys)]
        for _, row in unmatched.iterrows():
            matched_rows.append({
                "Ï£ºÎ¨∏Ïûê": "",
                "ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)": "",
                "ÏûÖÍ∏àÏûê(Ïã§Ï†ú)": row["ÏûÖÍ∏àÏûê(Ïã§Ï†ú)"],
                "Ï¥ù Íµ¨Îß§Í∏àÏï°": 0,
                "ÌÜµÏû•ÏûÖÍ∏à": row["ÌÜµÏû•ÏûÖÍ∏à"]
            })

        # ‚úÖ ÏµúÏ¢Ö Í≥ÑÏÇ∞
        result_df = pd.DataFrame(matched_rows)
        result_df["Ï∞®Ïù¥"] = result_df["ÌÜµÏû•ÏûÖÍ∏à"] - result_df["Ï¥ù Íµ¨Îß§Í∏àÏï°"]
        result_df = result_df[["Ï£ºÎ¨∏Ïûê", "ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)", "ÏûÖÍ∏àÏûê(Ïã§Ï†ú)", "Ï¥ù Íµ¨Îß§Í∏àÏï°", "ÌÜµÏû•ÏûÖÍ∏à", "Ï∞®Ïù¥"]].sort_values(by="Ï£ºÎ¨∏Ïûê")

        df_b2b = result_df[~((result_df["Ï£ºÎ¨∏Ïûê"] == "") & (result_df["ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)"] == ""))].copy()
        df_non_b2b = result_df[(result_df["Ï£ºÎ¨∏Ïûê"] == "") & (result_df["ÏûÖÍ∏àÏûê(ÏÇ¨Ïù¥Ìä∏)"] == "")].copy()
        df_more_paid = df_b2b[df_b2b["Ï∞®Ïù¥"] > 0].copy()
        df_less_paid = df_b2b[df_b2b["Ï∞®Ïù¥"] < 0].copy()

        st.success("‚úÖ Ï†ïÏÇ∞ÌëúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        st.dataframe(result_df, use_container_width=True)

        # ‚úÖ ÏóëÏÖÄÎ°ú Ï†ÄÏû• Î∞è Í∞ïÏ°∞
        towrite = io.BytesIO()
        with pd.ExcelWriter(towrite, engine="openpyxl") as writer:
            df_b2b.to_excel(writer, index=False, sheet_name="B2B")
            df_non_b2b.to_excel(writer, index=False, sheet_name="B2B Ïù¥Ïô∏")
            df_more_paid.to_excel(writer, index=False, sheet_name="B2B_Îçî ÏûÖÍ∏àÎêú Í±¥Îì§")
            df_less_paid.to_excel(writer, index=False, sheet_name="B2B_Îçú ÏûÖÍ∏àÎêú Í±¥Îì§")

            workbook = writer.book
            yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
            red_font = Font(color="FF0000", bold=True)
            bold_font = Font(bold=True)

            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
                    diff = row[5].value
                    if diff is None:
                        continue
                    if sheet_name == "B2B_Îçî ÏûÖÍ∏àÎêú Í±¥Îì§" and diff > 0:
                        row[0].font = bold_font
                    elif sheet_name == "B2B_Îçú ÏûÖÍ∏àÎêú Í±¥Îì§" and diff < 0:
                        row[0].font = red_font

                    if diff > 0:
                        row[5].fill = yellow_fill
                        row[5].font = bold_font
                    elif diff < 0:
                        row[5].font = red_font

        st.download_button("üì• Ï†ïÏÇ∞ Í≤∞Í≥º Îã§Ïö¥Î°úÎìú", towrite.getvalue(), file_name="Ï†ïÏÇ∞Í≤∞Í≥º(Í∞ïÏ°∞ÏôÑÎ£å).xlsx")

    except Exception as e:
        st.error(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
